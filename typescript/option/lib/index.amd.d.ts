import { Brand } from "utility-types";
declare const none: unique symbol;
declare const some: unique symbol;
declare type None = Brand<void, typeof none>;
declare type Some<T> = Brand<T, typeof some>;
declare type Option<T> = Some<T> | None;
declare const None: Brand<void, typeof none>;
declare const Some: <T>(value: T) => Option<T>;
declare const isNone: <T>(option: Option<T>) => boolean;
declare const isSome: <T>(option: Option<T>) => boolean;
declare type Mapper<T, U> = (v: T) => U;
declare type Binder<T, U> = (v: T) => Option<U>;
declare type Predicate<T> = (v: T) => boolean;
declare type Folder<T, U> = (s: U, v: T) => U;
declare type BackFolder<T, U> = (v: T, s: U) => U;
declare type Nullable<T> = T | null;
declare const bind: <T, U>(binder: Binder<T, U>, option: Option<T>) => Option<U>;
declare const bindAsync: <T, U>(binder: Mapper<T, Promise<Option<U>>>, option: Option<T>) => Promise<Option<U>>;
declare const count: <T>(option: Option<T>) => number;
declare const exists: <T>(predicate: Predicate<T>, option: Option<T>) => boolean;
declare const filter: <T>(predicate: Predicate<T>, option: Option<T>) => Option<T>;
declare const flat: <T>(option: Option<Option<T>>) => Option<T>;
declare const fold: <T, U>(folder: Folder<T, U>, initial: U, option: Option<T>) => U;
declare const foldback: <T, U>(folder: BackFolder<T, U>, option: Option<T>, initial: U) => U;
declare const forall: <T>(predicate: Predicate<T>, option: Option<T>) => boolean;
declare const fromArray: <T>(value: [T] | []) => Option<T>;
declare const fromNullable: <T>(value: Nullable<T>) => Option<T>;
declare const get: <T>(option: Option<T>) => T;
declare const iter: <T>(mapper: Mapper<T, void>, option: Option<T>) => void;
declare const map: <T, U>(mapper: Mapper<T, U>, option: Option<T>) => Option<U>;
declare const mapAsync: <T, U>(mapper: Mapper<T, Promise<U>>, option: Option<T>) => Promise<Option<U>>;
declare const toArray: <T>(option: Option<T>) => T[];
declare const toNullable: <T>(option: Option<T>) => T | null;
declare const withDefault: <T>(_default: T, option: Option<T>) => T;
export { bind, bindAsync, count, exists, filter, flat, fold, foldback, forall, fromArray, fromNullable, get, isNone, isSome, iter, map, mapAsync, toArray, toNullable, withDefault, Option, None, Some };
//# sourceMappingURL=index.amd.d.ts.map